# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from jdcloud_sdk.core.jdcloudrequest import JDCloudRequest


class GravityParticleDubboJobManagerValidateJobRulesRequest(JDCloudRequest):
    """
    校验作业规则
    """

    def __init__(self, parameters, header=None, version="v2"):
        super(GravityParticleDubboJobManagerValidateJobRulesRequest, self).__init__(
            '/regions/{regionId}/apps/{appName}/gravityParticleDubboJobManagerValidateJobRules', 'POST', header, version)
        self.parameters = parameters


class GravityParticleDubboJobManagerValidateJobRulesParameters(object):

    def __init__(self,regionId, appName, ):
        """
        :param regionId: 地域ID
        :param appName: 应用名称
        """

        self.regionId = regionId
        self.appName = appName
        self.projectId = None
        self.projectName = None
        self.projectNameMatch = None
        self.nameKeyWord = None
        self.relationType = None
        self.modelId = None
        self.modelName = None
        self.modelNameMatch = None
        self.gitUrl = None
        self.tableId = None
        self.databaseName = None
        self.marketId = None
        self.marketCode = None
        self.marketName = None
        self.redirectType = None
        self.tableName = None
        self.tableNameMatch = None
        self.jobName = None
        self.jobSystem = None
        self.triggerType = None
        self.triggerConfig = None
        self.zipCommand = None
        self.zipFileName = None
        self.zipParams = None
        self.dependencies = None
        self.manager = None
        self.cooperator = None
        self.priority = None
        self.jobDesc = None
        self.scriptType = None
        self.runScript = None
        self.scriptContent = None
        self.cycle = None
        self.sequence = None
        self.lifeCycle = None
        self.retry = None
        self.retryCount = None
        self.retryInterval = None
        self.notifyOccasion = None
        self.notifyTime = None
        self.notifyPattern = None
        self.notifier = None
        self.startRunTime = None
        self.endRunTime = None
        self.runTime = None
        self.runDate = None
        self.flowId = None
        self.taskId = None
        self.userAccount = None
        self.userPwd = None
        self.markIds = None
        self.runTimeOut = None
        self.scriptSourceType = None
        self.scriptTemplate = None
        self.dmrTableIds = None
        self.dmrTables = None
        self.gitFilesList = None
        self.isDeploy = None
        self.scriptPath = None
        self.scriptByte = None
        self.fileId = None
        self.publishDesc = None
        self.scriptInfo = None
        self.version = None
        self.channel = None
        self.sequenceStartTime = None
        self.sequenceEndTime = None
        self.sequenceInterval = None
        self.runParams = None
        self.runQueue = None
        self.sparkJarRunParams = None
        self.submitConf = None
        self.jobStatus = None
        self.resourceCode = None
        self.workspaceCode = None
        self.cstJobName = None
        self.fromGravity = None
        self.processType = None
        self.companyCode = None
        self.windowStartTime = None
        self.windowEndTime = None
        self.scriptUrl = None
        self.resourceName = None
        self.datasourceId = None
        self.inputParams = None
        self.outputParams = None
        self.loopParam = None

    def setProjectId(self, projectId):
        """
        :param projectId: (Optional) 
        """
        self.projectId = projectId

    def setProjectName(self, projectName):
        """
        :param projectName: (Optional) 
        """
        self.projectName = projectName

    def setProjectNameMatch(self, projectNameMatch):
        """
        :param projectNameMatch: (Optional) 
        """
        self.projectNameMatch = projectNameMatch

    def setNameKeyWord(self, nameKeyWord):
        """
        :param nameKeyWord: (Optional) 
        """
        self.nameKeyWord = nameKeyWord

    def setRelationType(self, relationType):
        """
        :param relationType: (Optional) 
        """
        self.relationType = relationType

    def setModelId(self, modelId):
        """
        :param modelId: (Optional) 
        """
        self.modelId = modelId

    def setModelName(self, modelName):
        """
        :param modelName: (Optional) 
        """
        self.modelName = modelName

    def setModelNameMatch(self, modelNameMatch):
        """
        :param modelNameMatch: (Optional) 
        """
        self.modelNameMatch = modelNameMatch

    def setGitUrl(self, gitUrl):
        """
        :param gitUrl: (Optional) 
        """
        self.gitUrl = gitUrl

    def setTableId(self, tableId):
        """
        :param tableId: (Optional) 
        """
        self.tableId = tableId

    def setDatabaseName(self, databaseName):
        """
        :param databaseName: (Optional) 
        """
        self.databaseName = databaseName

    def setMarketId(self, marketId):
        """
        :param marketId: (Optional) 
        """
        self.marketId = marketId

    def setMarketCode(self, marketCode):
        """
        :param marketCode: (Optional) 
        """
        self.marketCode = marketCode

    def setMarketName(self, marketName):
        """
        :param marketName: (Optional) 
        """
        self.marketName = marketName

    def setRedirectType(self, redirectType):
        """
        :param redirectType: (Optional) 
        """
        self.redirectType = redirectType

    def setTableName(self, tableName):
        """
        :param tableName: (Optional) 
        """
        self.tableName = tableName

    def setTableNameMatch(self, tableNameMatch):
        """
        :param tableNameMatch: (Optional) 
        """
        self.tableNameMatch = tableNameMatch

    def setJobName(self, jobName):
        """
        :param jobName: (Optional) 
        """
        self.jobName = jobName

    def setJobSystem(self, jobSystem):
        """
        :param jobSystem: (Optional) 
        """
        self.jobSystem = jobSystem

    def setTriggerType(self, triggerType):
        """
        :param triggerType: (Optional) 
        """
        self.triggerType = triggerType

    def setTriggerConfig(self, triggerConfig):
        """
        :param triggerConfig: (Optional) 
        """
        self.triggerConfig = triggerConfig

    def setZipCommand(self, zipCommand):
        """
        :param zipCommand: (Optional) 
        """
        self.zipCommand = zipCommand

    def setZipFileName(self, zipFileName):
        """
        :param zipFileName: (Optional) 
        """
        self.zipFileName = zipFileName

    def setZipParams(self, zipParams):
        """
        :param zipParams: (Optional) 
        """
        self.zipParams = zipParams

    def setDependencies(self, dependencies):
        """
        :param dependencies: (Optional) 
        """
        self.dependencies = dependencies

    def setManager(self, manager):
        """
        :param manager: (Optional) 
        """
        self.manager = manager

    def setCooperator(self, cooperator):
        """
        :param cooperator: (Optional) 
        """
        self.cooperator = cooperator

    def setPriority(self, priority):
        """
        :param priority: (Optional) 优先级，l1 - l4
        """
        self.priority = priority

    def setJobDesc(self, jobDesc):
        """
        :param jobDesc: (Optional) 
        """
        self.jobDesc = jobDesc

    def setScriptType(self, scriptType):
        """
        :param scriptType: (Optional) 
        """
        self.scriptType = scriptType

    def setRunScript(self, runScript):
        """
        :param runScript: (Optional) 
        """
        self.runScript = runScript

    def setScriptContent(self, scriptContent):
        """
        :param scriptContent: (Optional) 
        """
        self.scriptContent = scriptContent

    def setCycle(self, cycle):
        """
        :param cycle: (Optional) 
        """
        self.cycle = cycle

    def setSequence(self, sequence):
        """
        :param sequence: (Optional) 
        """
        self.sequence = sequence

    def setLifeCycle(self, lifeCycle):
        """
        :param lifeCycle: (Optional) 
        """
        self.lifeCycle = lifeCycle

    def setRetry(self, retry):
        """
        :param retry: (Optional) 
        """
        self.retry = retry

    def setRetryCount(self, retryCount):
        """
        :param retryCount: (Optional) 
        """
        self.retryCount = retryCount

    def setRetryInterval(self, retryInterval):
        """
        :param retryInterval: (Optional) 
        """
        self.retryInterval = retryInterval

    def setNotifyOccasion(self, notifyOccasion):
        """
        :param notifyOccasion: (Optional) 
        """
        self.notifyOccasion = notifyOccasion

    def setNotifyTime(self, notifyTime):
        """
        :param notifyTime: (Optional) 
        """
        self.notifyTime = notifyTime

    def setNotifyPattern(self, notifyPattern):
        """
        :param notifyPattern: (Optional) 
        """
        self.notifyPattern = notifyPattern

    def setNotifier(self, notifier):
        """
        :param notifier: (Optional) 
        """
        self.notifier = notifier

    def setStartRunTime(self, startRunTime):
        """
        :param startRunTime: (Optional) 
        """
        self.startRunTime = startRunTime

    def setEndRunTime(self, endRunTime):
        """
        :param endRunTime: (Optional) 
        """
        self.endRunTime = endRunTime

    def setRunTime(self, runTime):
        """
        :param runTime: (Optional) 
        """
        self.runTime = runTime

    def setRunDate(self, runDate):
        """
        :param runDate: (Optional) 
        """
        self.runDate = runDate

    def setFlowId(self, flowId):
        """
        :param flowId: (Optional) 
        """
        self.flowId = flowId

    def setTaskId(self, taskId):
        """
        :param taskId: (Optional) 
        """
        self.taskId = taskId

    def setUserAccount(self, userAccount):
        """
        :param userAccount: (Optional) 
        """
        self.userAccount = userAccount

    def setUserPwd(self, userPwd):
        """
        :param userPwd: (Optional) 
        """
        self.userPwd = userPwd

    def setMarkIds(self, markIds):
        """
        :param markIds: (Optional) 
        """
        self.markIds = markIds

    def setRunTimeOut(self, runTimeOut):
        """
        :param runTimeOut: (Optional) 
        """
        self.runTimeOut = runTimeOut

    def setScriptSourceType(self, scriptSourceType):
        """
        :param scriptSourceType: (Optional) 
        """
        self.scriptSourceType = scriptSourceType

    def setScriptTemplate(self, scriptTemplate):
        """
        :param scriptTemplate: (Optional) 
        """
        self.scriptTemplate = scriptTemplate

    def setDmrTableIds(self, dmrTableIds):
        """
        :param dmrTableIds: (Optional) 
        """
        self.dmrTableIds = dmrTableIds

    def setDmrTables(self, dmrTables):
        """
        :param dmrTables: (Optional) 
        """
        self.dmrTables = dmrTables

    def setGitFilesList(self, gitFilesList):
        """
        :param gitFilesList: (Optional) 
        """
        self.gitFilesList = gitFilesList

    def setIsDeploy(self, isDeploy):
        """
        :param isDeploy: (Optional) 
        """
        self.isDeploy = isDeploy

    def setScriptPath(self, scriptPath):
        """
        :param scriptPath: (Optional) 
        """
        self.scriptPath = scriptPath

    def setScriptByte(self, scriptByte):
        """
        :param scriptByte: (Optional) 
        """
        self.scriptByte = scriptByte

    def setFileId(self, fileId):
        """
        :param fileId: (Optional) 
        """
        self.fileId = fileId

    def setPublishDesc(self, publishDesc):
        """
        :param publishDesc: (Optional) 
        """
        self.publishDesc = publishDesc

    def setScriptInfo(self, scriptInfo):
        """
        :param scriptInfo: (Optional) 
        """
        self.scriptInfo = scriptInfo

    def setVersion(self, version):
        """
        :param version: (Optional) 
        """
        self.version = version

    def setChannel(self, channel):
        """
        :param channel: (Optional) 
        """
        self.channel = channel

    def setSequenceStartTime(self, sequenceStartTime):
        """
        :param sequenceStartTime: (Optional) 
        """
        self.sequenceStartTime = sequenceStartTime

    def setSequenceEndTime(self, sequenceEndTime):
        """
        :param sequenceEndTime: (Optional) 
        """
        self.sequenceEndTime = sequenceEndTime

    def setSequenceInterval(self, sequenceInterval):
        """
        :param sequenceInterval: (Optional) 
        """
        self.sequenceInterval = sequenceInterval

    def setRunParams(self, runParams):
        """
        :param runParams: (Optional) 
        """
        self.runParams = runParams

    def setRunQueue(self, runQueue):
        """
        :param runQueue: (Optional) 
        """
        self.runQueue = runQueue

    def setSparkJarRunParams(self, sparkJarRunParams):
        """
        :param sparkJarRunParams: (Optional) 
        """
        self.sparkJarRunParams = sparkJarRunParams

    def setSubmitConf(self, submitConf):
        """
        :param submitConf: (Optional) 
        """
        self.submitConf = submitConf

    def setJobStatus(self, jobStatus):
        """
        :param jobStatus: (Optional) 
        """
        self.jobStatus = jobStatus

    def setResourceCode(self, resourceCode):
        """
        :param resourceCode: (Optional) 计算资源组code
        """
        self.resourceCode = resourceCode

    def setWorkspaceCode(self, workspaceCode):
        """
        :param workspaceCode: (Optional) 工作空间code
        """
        self.workspaceCode = workspaceCode

    def setCstJobName(self, cstJobName):
        """
        :param cstJobName: (Optional) 客户作业名称
        """
        self.cstJobName = cstJobName

    def setFromGravity(self, fromGravity):
        """
        :param fromGravity: (Optional) 
        """
        self.fromGravity = fromGravity

    def setProcessType(self, processType):
        """
        :param processType: (Optional) 处理类型
        """
        self.processType = processType

    def setCompanyCode(self, companyCode):
        """
        :param companyCode: (Optional) 租户code
        """
        self.companyCode = companyCode

    def setWindowStartTime(self, windowStartTime):
        """
        :param windowStartTime: (Optional) 窗口期开始时间
        """
        self.windowStartTime = windowStartTime

    def setWindowEndTime(self, windowEndTime):
        """
        :param windowEndTime: (Optional) 窗口期结束时间
        """
        self.windowEndTime = windowEndTime

    def setScriptUrl(self, scriptUrl):
        """
        :param scriptUrl: (Optional) 脚本存储路径
        """
        self.scriptUrl = scriptUrl

    def setResourceName(self, resourceName):
        """
        :param resourceName: (Optional) 计算资源组名称
        """
        self.resourceName = resourceName

    def setDatasourceId(self, datasourceId):
        """
        :param datasourceId: (Optional) 数据源ID，在一些要访问外部源的任务中，需要指定该数据源ID
        """
        self.datasourceId = datasourceId

    def setInputParams(self, inputParams):
        """
        :param inputParams: (Optional) 输入参数列表
        """
        self.inputParams = inputParams

    def setOutputParams(self, outputParams):
        """
        :param outputParams: (Optional) 输出参数列表
        """
        self.outputParams = outputParams

    def setLoopParam(self, loopParam):
        """
        :param loopParam: (Optional) 循环任务参数
        """
        self.loopParam = loopParam

