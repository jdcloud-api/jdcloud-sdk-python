# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from jdcloud_sdk.core.jdcloudrequest import JDCloudRequest


class GravityParticleParticleJobSchedUpdateSchedJobRequest(JDCloudRequest):
    """
    作业信息更新
    """

    def __init__(self, parameters, header=None, version="v2"):
        super(GravityParticleParticleJobSchedUpdateSchedJobRequest, self).__init__(
            '/regions/{regionId}/apps/{appName}/gravityParticleParticleJobSchedUpdateSchedJob', 'POST', header, version)
        self.parameters = parameters


class GravityParticleParticleJobSchedUpdateSchedJobParameters(object):

    def __init__(self,regionId, appName, ):
        """
        :param regionId: 地域ID
        :param appName: 应用名称
        """

        self.regionId = regionId
        self.appName = appName
        self.jobName = None
        self.cstJobName = None
        self.companyCode = None
        self.workspaceCode = None
        self.resourceCode = None
        self.jobDesc = None
        self.lastStatus = None
        self.lastTxDate = None
        self.lastStartTime = None
        self.lastEndTime = None
        self.lastServer = None
        self.lastSessionid = None
        self.lastReturnCode = None
        self.currentStatusMsg = None
        self.triggerType = None
        self.cycle = None
        self.sequence = None
        self.txDateOffset = None
        self.priority = None
        self.timeout = None
        self.windowStartTime = None
        self.windowEndTime = None
        self.morrowAutoExec = None
        self.dataZeroKillEnable = None
        self.retryCount = None
        self.retryInterval = None
        self.flagAgain = None
        self.flagAcross = None
        self.flagParallel = None
        self.flagCascadedTrigger = None
        self.requiredRunEnv = None
        self.runScript = None
        self.enable = None
        self.manager = None
        self.shareUser = None
        self.expireTime = None
        self.commands = None
        self.createUser = None
        self.createTime = None
        self.updateTime = None
        self.nodeName = None
        self.topic = None
        self.jobRunWay = None
        self.belongSys = None
        self.msDelayDealWay = None
        self.sequenceStartTime = None
        self.sequenceEndTime = None
        self.sequenceInterval = None
        self.runParams = None

    def setJobName(self, jobName):
        """
        :param jobName: (Optional) 作业名称
        """
        self.jobName = jobName

    def setCstJobName(self, cstJobName):
        """
        :param cstJobName: (Optional) 客户作业名称
        """
        self.cstJobName = cstJobName

    def setCompanyCode(self, companyCode):
        """
        :param companyCode: (Optional) 租户code
        """
        self.companyCode = companyCode

    def setWorkspaceCode(self, workspaceCode):
        """
        :param workspaceCode: (Optional) 工作空间code
        """
        self.workspaceCode = workspaceCode

    def setResourceCode(self, resourceCode):
        """
        :param resourceCode: (Optional) 计算资源组code
        """
        self.resourceCode = resourceCode

    def setJobDesc(self, jobDesc):
        """
        :param jobDesc: (Optional) 作业描述
        """
        self.jobDesc = jobDesc

    def setLastStatus(self, lastStatus):
        """
        :param lastStatus: (Optional) 最后一次运行状态，Pending、Ready、Running、Done、Failed、Clean
        """
        self.lastStatus = lastStatus

    def setLastTxDate(self, lastTxDate):
        """
        :param lastTxDate: (Optional) 最后一次执行日期
        """
        self.lastTxDate = lastTxDate

    def setLastStartTime(self, lastStartTime):
        """
        :param lastStartTime: (Optional) 最后一次运行开始时间
        """
        self.lastStartTime = lastStartTime

    def setLastEndTime(self, lastEndTime):
        """
        :param lastEndTime: (Optional) 最后一次运行结束时间
        """
        self.lastEndTime = lastEndTime

    def setLastServer(self, lastServer):
        """
        :param lastServer: (Optional) 最后一次运行服务器
        """
        self.lastServer = lastServer

    def setLastSessionid(self, lastSessionid):
        """
        :param lastSessionid: (Optional) Session ID
        """
        self.lastSessionid = lastSessionid

    def setLastReturnCode(self, lastReturnCode):
        """
        :param lastReturnCode: (Optional) 最后返回编码
        """
        self.lastReturnCode = lastReturnCode

    def setCurrentStatusMsg(self, currentStatusMsg):
        """
        :param currentStatusMsg: (Optional) 当前作业状态信息
        """
        self.currentStatusMsg = currentStatusMsg

    def setTriggerType(self, triggerType):
        """
        :param triggerType: (Optional) 触发类型:dependency 依赖、time 时间、file 文件、manual 手工、once 一次性
        """
        self.triggerType = triggerType

    def setCycle(self, cycle):
        """
        :param cycle: (Optional) 运行周期 ,F 分钟、H 小时、D 天、W 周、M 月、O 一次性运行、N 无周期
        """
        self.cycle = cycle

    def setSequence(self, sequence):
        """
        :param sequence: (Optional) 周期具体日期
        """
        self.sequence = sequence

    def setTxDateOffset(self, txDateOffset):
        """
        :param txDateOffset: (Optional) T+N，偏移量
        """
        self.txDateOffset = txDateOffset

    def setPriority(self, priority):
        """
        :param priority: (Optional) 作业优先级，数字越小优先级越高
        """
        self.priority = priority

    def setTimeout(self, timeout):
        """
        :param timeout: (Optional) 作业超时时间，单位分钟
        """
        self.timeout = timeout

    def setWindowStartTime(self, windowStartTime):
        """
        :param windowStartTime: (Optional) 窗口期开始时间
        """
        self.windowStartTime = windowStartTime

    def setWindowEndTime(self, windowEndTime):
        """
        :param windowEndTime: (Optional) 窗口期结束时间
        """
        self.windowEndTime = windowEndTime

    def setMorrowAutoExec(self, morrowAutoExec):
        """
        :param morrowAutoExec: (Optional) 失败后次日是否自动运行，1是、0否
        """
        self.morrowAutoExec = morrowAutoExec

    def setDataZeroKillEnable(self, dataZeroKillEnable):
        """
        :param dataZeroKillEnable: (Optional) 抽空之后的处理 0 无操作 1 作业失败 2发出警告
        """
        self.dataZeroKillEnable = dataZeroKillEnable

    def setRetryCount(self, retryCount):
        """
        :param retryCount: (Optional) 重试次数
        """
        self.retryCount = retryCount

    def setRetryInterval(self, retryInterval):
        """
        :param retryInterval: (Optional) 间隔/秒
        """
        self.retryInterval = retryInterval

    def setFlagAgain(self, flagAgain):
        """
        :param flagAgain: (Optional) 当期已经跑成功过，是否可以再跑，1启用、0关闭
        """
        self.flagAgain = flagAgain

    def setFlagAcross(self, flagAcross):
        """
        :param flagAcross: (Optional) 是否可以跨周期跑，1启用、0关闭
        """
        self.flagAcross = flagAcross

    def setFlagParallel(self, flagParallel):
        """
        :param flagParallel: (Optional) 是否可以自身并行，1启用、0关闭
        """
        self.flagParallel = flagParallel

    def setFlagCascadedTrigger(self, flagCascadedTrigger):
        """
        :param flagCascadedTrigger: (Optional) 是否级联触发，父任务重跑后是否被强制触发重跑，1是、0否
        """
        self.flagCascadedTrigger = flagCascadedTrigger

    def setRequiredRunEnv(self, requiredRunEnv):
        """
        :param requiredRunEnv: (Optional) 需要的运行环境
        """
        self.requiredRunEnv = requiredRunEnv

    def setRunScript(self, runScript):
        """
        :param runScript: (Optional) 运行脚本
        """
        self.runScript = runScript

    def setEnable(self, enable):
        """
        :param enable: (Optional) 是否启用，0未上线、1已上线、2已下线
        """
        self.enable = enable

    def setManager(self, manager):
        """
        :param manager: (Optional) 负责人，不超过10个
        """
        self.manager = manager

    def setShareUser(self, shareUser):
        """
        :param shareUser: (Optional) 共享人，不超过10个
        """
        self.shareUser = shareUser

    def setExpireTime(self, expireTime):
        """
        :param expireTime: (Optional) 失效时间
        """
        self.expireTime = expireTime

    def setCommands(self, commands):
        """
        :param commands: (Optional) zip命令行
        """
        self.commands = commands

    def setCreateUser(self, createUser):
        """
        :param createUser: (Optional) 创建人
        """
        self.createUser = createUser

    def setCreateTime(self, createTime):
        """
        :param createTime: (Optional) 创建时间
        """
        self.createTime = createTime

    def setUpdateTime(self, updateTime):
        """
        :param updateTime: (Optional) 更新时间
        """
        self.updateTime = updateTime

    def setNodeName(self, nodeName):
        """
        :param nodeName: (Optional) 实时结点名称
        """
        self.nodeName = nodeName

    def setTopic(self, topic):
        """
        :param topic: (Optional) 实时主题
        """
        self.topic = topic

    def setJobRunWay(self, jobRunWay):
        """
        :param jobRunWay: (Optional) 作业执行方式  0离线 1双写 2实时
        """
        self.jobRunWay = jobRunWay

    def setBelongSys(self, belongSys):
        """
        :param belongSys: (Optional) 所属系统
        """
        self.belongSys = belongSys

    def setMsDelayDealWay(self, msDelayDealWay):
        """
        :param msDelayDealWay: (Optional) 主从同步延迟处理方式。0:警告无处理，1:作业延迟启动
        """
        self.msDelayDealWay = msDelayDealWay

    def setSequenceStartTime(self, sequenceStartTime):
        """
        :param sequenceStartTime: (Optional) 周期开始时间(适用小时分钟)
        """
        self.sequenceStartTime = sequenceStartTime

    def setSequenceEndTime(self, sequenceEndTime):
        """
        :param sequenceEndTime: (Optional) 周期结束时间(适用小时分钟)
        """
        self.sequenceEndTime = sequenceEndTime

    def setSequenceInterval(self, sequenceInterval):
        """
        :param sequenceInterval: (Optional) 周期间隔(适用小时分钟，当周期为小时，含义为间隔小时数，当周期为分钟，含义为间隔分钟数)
        """
        self.sequenceInterval = sequenceInterval

    def setRunParams(self, runParams):
        """
        :param runParams: (Optional) 作业运行参数
        """
        self.runParams = runParams

