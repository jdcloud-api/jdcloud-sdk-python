# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from jdcloud_sdk.core.jdcloudrequest import JDCloudRequest


class UranusTablePublishRequest(JDCloudRequest):
    """
    发布，保存发布，更新发布等等
    """

    def __init__(self, parameters, header=None, version="v2"):
        super(UranusTablePublishRequest, self).__init__(
            '/regions/{regionId}/apps/{appName}/uranusTablePublish', 'POST', header, version)
        self.parameters = parameters


class UranusTablePublishParameters(object):

    def __init__(self,regionId, appName, tableEnName, columns, ):
        """
        :param regionId: 地域ID
        :param appName: 应用名称
        :param tableEnName: 表英文名称
        :param columns: 表的普通字段信息
        """

        self.regionId = regionId
        self.appName = appName
        self.tableEnName = tableEnName
        self.tableCnName = None
        self.owner = None
        self.manager = None
        self.columns = columns
        self.partitions = None
        self.isPartition = None
        self.updateTable = None
        self.storageType = None
        self.fieldDelim = None
        self.lineDelim = None
        self.bucketCols = None
        self.bucketNum = None

    def setTableCnName(self, tableCnName):
        """
        :param tableCnName: (Optional) 表中文名
        """
        self.tableCnName = tableCnName

    def setOwner(self, owner):
        """
        :param owner: (Optional) 负责人
        """
        self.owner = owner

    def setManager(self, manager):
        """
        :param manager: (Optional) 协助人
        """
        self.manager = manager

    def setPartitions(self, partitions):
        """
        :param partitions: (Optional) 表的分区字段信息
        """
        self.partitions = partitions

    def setIsPartition(self, isPartition):
        """
        :param isPartition: (Optional) 0 非分区表 1 分区表
        """
        self.isPartition = isPartition

    def setUpdateTable(self, updateTable):
        """
        :param updateTable: (Optional) 0 新建表 1 修改表
        """
        self.updateTable = updateTable

    def setStorageType(self, storageType):
        """
        :param storageType: (Optional) 表存储格式
        """
        self.storageType = storageType

    def setFieldDelim(self, fieldDelim):
        """
        :param fieldDelim: (Optional) 表字段分隔符（只有TEXTFILE类型表需要该字段）
        """
        self.fieldDelim = fieldDelim

    def setLineDelim(self, lineDelim):
        """
        :param lineDelim: (Optional) 表行分隔符（只有TEXTFILE类型表需要该字段）
        """
        self.lineDelim = lineDelim

    def setBucketCols(self, bucketCols):
        """
        :param bucketCols: (Optional) 分桶字段
        """
        self.bucketCols = bucketCols

    def setBucketNum(self, bucketNum):
        """
        :param bucketNum: (Optional) 分桶字段
        """
        self.bucketNum = bucketNum

