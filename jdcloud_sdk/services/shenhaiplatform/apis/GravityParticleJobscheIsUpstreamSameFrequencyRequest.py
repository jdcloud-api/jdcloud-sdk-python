# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from jdcloud_sdk.core.jdcloudrequest import JDCloudRequest


class GravityParticleJobscheIsUpstreamSameFrequencyRequest(JDCloudRequest):
    """
    判断作业和上游是否完全同频
    """

    def __init__(self, parameters, header=None, version="v2"):
        super(GravityParticleJobscheIsUpstreamSameFrequencyRequest, self).__init__(
            '/regions/{regionId}/apps/{appName}/gravityParticleJobscheIsUpstreamSameFrequency', 'POST', header, version)
        self.parameters = parameters


class GravityParticleJobscheIsUpstreamSameFrequencyParameters(object):

    def __init__(self,regionId, appName, ):
        """
        :param regionId: 地域ID
        :param appName: 应用名称
        """

        self.regionId = regionId
        self.appName = appName
        self.jobName = None
        self.dependJobName = None
        self.startTime = None
        self.endTime = None
        self.interval = None
        self.cycle = None

    def setJobName(self, jobName):
        """
        :param jobName: (Optional) 作业名称
        """
        self.jobName = jobName

    def setDependJobName(self, dependJobName):
        """
        :param dependJobName: (Optional) 依赖作业名称清单
        """
        self.dependJobName = dependJobName

    def setStartTime(self, startTime):
        """
        :param startTime: (Optional) 作业开始时间
        """
        self.startTime = startTime

    def setEndTime(self, endTime):
        """
        :param endTime: (Optional) 作业结束时间
        """
        self.endTime = endTime

    def setInterval(self, interval):
        """
        :param interval: (Optional) 作业时间间隔
        """
        self.interval = interval

    def setCycle(self, cycle):
        """
        :param cycle: (Optional) 作业运行周期
        """
        self.cycle = cycle

