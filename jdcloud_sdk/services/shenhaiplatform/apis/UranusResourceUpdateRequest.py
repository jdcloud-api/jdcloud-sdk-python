# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from jdcloud_sdk.core.jdcloudrequest import JDCloudRequest


class UranusResourceUpdateRequest(JDCloudRequest):
    """
    更新资源
    """

    def __init__(self, parameters, header=None, version="v2"):
        super(UranusResourceUpdateRequest, self).__init__(
            '/regions/{regionId}/apps/{appName}/uranusResourceUpdate', 'POST', header, version)
        self.parameters = parameters


class UranusResourceUpdateParameters(object):

    def __init__(self,regionId, appName, ):
        """
        :param regionId: 地域ID
        :param appName: 应用名称
        """

        self.regionId = regionId
        self.appName = appName
        self.resourceCode = None
        self.originalName = None
        self.uploadMode = None
        self.managers = None
        self.status = None
        self.env = None

    def setResourceCode(self, resourceCode):
        """
        :param resourceCode: (Optional) 资源code
        """
        self.resourceCode = resourceCode

    def setOriginalName(self, originalName):
        """
        :param originalName: (Optional) 原始资源名称（上传的原始文件在本地客户端的文件名称）
        """
        self.originalName = originalName

    def setUploadMode(self, uploadMode):
        """
        :param uploadMode: (Optional) 文件上传方式（默认为本地上传）
        """
        self.uploadMode = uploadMode

    def setManagers(self, managers):
        """
        :param managers: (Optional) 负责人
        """
        self.managers = managers

    def setStatus(self, status):
        """
        :param status: (Optional) 资源状态
        """
        self.status = status

    def setEnv(self, env):
        """
        :param env: (Optional) 环境信息（prod：生产环境；dev：开发环境），简单模式默认为prod
        """
        self.env = env

