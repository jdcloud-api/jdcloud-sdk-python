# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from jdcloud_sdk.core.jdcloudrequest import JDCloudRequest


class UranusFunctionCreateRequest(JDCloudRequest):
    """
    新建函数
    """

    def __init__(self, parameters, header=None, version="v2"):
        super(UranusFunctionCreateRequest, self).__init__(
            '/regions/{regionId}/apps/{appName}/uranusFunctionCreate', 'POST', header, version)
        self.parameters = parameters


class UranusFunctionCreateParameters(object):

    def __init__(self,regionId, appName, ):
        """
        :param regionId: 地域ID
        :param appName: 应用名称
        """

        self.regionId = regionId
        self.appName = appName
        self.companyCode = None
        self.workspaceCode = None
        self.functionName = None
        self.functionCatalogId = None
        self.className = None
        self.managers = None
        self.resourceCodes = None
        self.functionFormat = None
        self.functionUsage = None
        self.relativeEngine = None

    def setCompanyCode(self, companyCode):
        """
        :param companyCode: (Optional) 租户code
        """
        self.companyCode = companyCode

    def setWorkspaceCode(self, workspaceCode):
        """
        :param workspaceCode: (Optional) 命名空间code
        """
        self.workspaceCode = workspaceCode

    def setFunctionName(self, functionName):
        """
        :param functionName: (Optional) 函数名称（支持字母、数字、下划线，不超过50个字符）
        """
        self.functionName = functionName

    def setFunctionCatalogId(self, functionCatalogId):
        """
        :param functionCatalogId: (Optional) 分类目录id
        """
        self.functionCatalogId = functionCatalogId

    def setClassName(self, className):
        """
        :param className: (Optional) 函数主类全路径
        """
        self.className = className

    def setManagers(self, managers):
        """
        :param managers: (Optional) 负责人
        """
        self.managers = managers

    def setResourceCodes(self, resourceCodes):
        """
        :param resourceCodes: (Optional) 依赖的资源code（包括资源文件/资源目录）
        """
        self.resourceCodes = resourceCodes

    def setFunctionFormat(self, functionFormat):
        """
        :param functionFormat: (Optional) 函数格式
        """
        self.functionFormat = functionFormat

    def setFunctionUsage(self, functionUsage):
        """
        :param functionUsage: (Optional) 函数使用说明
        """
        self.functionUsage = functionUsage

    def setRelativeEngine(self, relativeEngine):
        """
        :param relativeEngine: (Optional) 关联引擎
        """
        self.relativeEngine = relativeEngine

