# coding=utf8

# Copyright 2018 JDCLOUD.COM
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# NOTE: This class is auto generated by the jdcloud code generator program.

from jdcloud_sdk.core.jdcloudrequest import JDCloudRequest


class WorkspaceBundleOrUnBundleResourceRequest(JDCloudRequest):
    """
    获取工作空间列表
    """

    def __init__(self, parameters, header=None, version="v2"):
        super(WorkspaceBundleOrUnBundleResourceRequest, self).__init__(
            '/regions/{regionId}/apps/{appName}/workspaceBundleOrUnBundleResource', 'POST', header, version)
        self.parameters = parameters


class WorkspaceBundleOrUnBundleResourceParameters(object):

    def __init__(self,regionId, appName, ):
        """
        :param regionId: 地域ID
        :param appName: 应用名称
        """

        self.regionId = regionId
        self.appName = appName
        self.workspaceCode = None
        self.userPin = None
        self.calculateResourceCode = None
        self.integrationResourceCode = None
        self.bundleResource = None

    def setWorkspaceCode(self, workspaceCode):
        """
        :param workspaceCode: (Optional) 工作空间code
        """
        self.workspaceCode = workspaceCode

    def setUserPin(self, userPin):
        """
        :param userPin: (Optional) 
        """
        self.userPin = userPin

    def setCalculateResourceCode(self, calculateResourceCode):
        """
        :param calculateResourceCode: (Optional) 
        """
        self.calculateResourceCode = calculateResourceCode

    def setIntegrationResourceCode(self, integrationResourceCode):
        """
        :param integrationResourceCode: (Optional) 
        """
        self.integrationResourceCode = integrationResourceCode

    def setBundleResource(self, bundleResource):
        """
        :param bundleResource: (Optional) 
        """
        self.bundleResource = bundleResource

